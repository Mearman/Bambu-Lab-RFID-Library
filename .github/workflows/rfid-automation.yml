name: RFID Data Processing Automation

on:
  # Run on pushes to main that affect RFID files
  push:
    branches: [ main ]
    paths:
      - '**/*.bin'
  
  # Run on schedule to catch any missed files
  schedule:
    # Run daily at 02:00 UTC
    - cron: '0 2 * * *'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      force_regenerate:
        description: 'Force regenerate all files (not just missing ones)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

permissions:
  contents: write
  pull-requests: write

jobs:
  setup-pr-branch:
    name: Setup PR Branch
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      branch_name: ${{ steps.setup-branch.outputs.branch_name }}
      pr_number: ${{ steps.setup-branch.outputs.pr_number }}
      is_new_pr: ${{ steps.setup-branch.outputs.is_new_pr }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Setup PR branch
        id: setup-branch
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = 'auto/rfid-generation';
            
            // Check for existing open PRs with this branch
            const { data: openPRs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${branchName}`
            });
            
            let prNumber = null;
            let isNewPR = true;
            
            if (openPRs.length > 0) {
              prNumber = openPRs[0].number;
              isNewPR = false;
              console.log(`Found existing PR #${prNumber}, will merge into it`);
              
              // Switch to existing PR branch and merge main
              await exec.exec('git', ['fetch', 'origin', branchName]);
              await exec.exec('git', ['checkout', branchName]);
              await exec.exec('git', ['merge', 'origin/main', '--no-edit']);
            } else {
              console.log('No existing PR found, will create new branch');
              await exec.exec('git', ['checkout', '-b', branchName]);
            }
            
            core.setOutput('branch_name', branchName);
            core.setOutput('pr_number', prNumber || '');
            core.setOutput('is_new_pr', isNewPR);

  check-missing-files:
    name: Check for Missing Files
    runs-on: ubuntu-latest
    needs: setup-pr-branch
    timeout-minutes: 15
    outputs:
      missing_json: ${{ steps.find-missing.outputs.missing_json }}
      has_missing_json: ${{ steps.find-missing.outputs.has_missing_json }}
      total_missing_json: ${{ steps.find-missing.outputs.total_missing_json }}
      missing_keys: ${{ steps.find-missing.outputs.missing_keys }}
      has_missing_keys: ${{ steps.find-missing.outputs.has_missing_keys }}
      total_missing_keys: ${{ steps.find-missing.outputs.total_missing_keys }}
      missing_decrypted: ${{ steps.find-missing.outputs.missing_decrypted }}
      has_missing_decrypted: ${{ steps.find-missing.outputs.has_missing_decrypted }}
      total_missing_decrypted: ${{ steps.find-missing.outputs.total_missing_decrypted }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.setup-pr-branch.outputs.branch_name }}
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pycryptodome
      
      - name: Find missing files
        id: find-missing
        run: |
          echo "Scanning for missing JSON files..."
          python3 .github/scripts/local-json-generator.py . --dry-run ${{ github.event.inputs.force_regenerate == 'true' && '--force' || '' }} > json_check.log 2>&1
          JSON_COUNT=$(grep "Found.*files needing JSON generation" json_check.log | grep -o '[0-9]*' | head -1 || echo "0")
          
          echo "Scanning for missing dictionary files..."
          python3 .github/scripts/key-to-dic-converter.py . --dry-run ${{ github.event.inputs.force_regenerate == 'true' && '--force' || '' }} > keys_check.log 2>&1
          KEYS_COUNT=$(grep "Found.*files needing .dic conversion" keys_check.log | grep -o '[0-9]*' | head -1 || echo "0")
          
          echo "Scanning for missing decrypted files..."
          python3 .github/scripts/decrypt-rfid-dumps.py . --dry-run ${{ github.event.inputs.force_regenerate == 'true' && '--force' || '' }} > decrypt_check.log 2>&1
          DECRYPT_COUNT=$(grep "Found.*files needing decryption" decrypt_check.log | grep -o '[0-9]*' | head -1 || echo "0")
          
          echo "Found files needing processing:"
          echo "  - JSON files: $JSON_COUNT"
          echo "  - Dictionary files: $KEYS_COUNT"  
          echo "  - Decrypted files: $DECRYPT_COUNT"
          
          # Set JSON outputs
          if [ "$JSON_COUNT" -gt "0" ]; then
            echo "has_missing_json=true" >> $GITHUB_OUTPUT
            echo "total_missing_json=$JSON_COUNT" >> $GITHUB_OUTPUT
            echo "missing_json=[]" >> $GITHUB_OUTPUT  # Simplified for now
          else
            echo "has_missing_json=false" >> $GITHUB_OUTPUT
            echo "total_missing_json=0" >> $GITHUB_OUTPUT
            echo "missing_json=[]" >> $GITHUB_OUTPUT
          fi
          
          # Set Keys outputs  
          if [ "$KEYS_COUNT" -gt "0" ]; then
            echo "has_missing_keys=true" >> $GITHUB_OUTPUT
            echo "total_missing_keys=$KEYS_COUNT" >> $GITHUB_OUTPUT
            echo "missing_keys=[]" >> $GITHUB_OUTPUT  # Simplified for now
          else
            echo "has_missing_keys=false" >> $GITHUB_OUTPUT
            echo "total_missing_keys=0" >> $GITHUB_OUTPUT
            echo "missing_keys=[]" >> $GITHUB_OUTPUT
          fi
          
          # Set Decrypted outputs
          if [ "$DECRYPT_COUNT" -gt "0" ]; then
            echo "has_missing_decrypted=true" >> $GITHUB_OUTPUT
            echo "total_missing_decrypted=$DECRYPT_COUNT" >> $GITHUB_OUTPUT
            echo "missing_decrypted=[]" >> $GITHUB_OUTPUT  # Simplified for now
          else
            echo "has_missing_decrypted=false" >> $GITHUB_OUTPUT
            echo "total_missing_decrypted=0" >> $GITHUB_OUTPUT
            echo "missing_decrypted=[]" >> $GITHUB_OUTPUT
          fi

  generate-all-files:
    name: Generate All Missing Files
    runs-on: ubuntu-latest
    needs: [setup-pr-branch, check-missing-files]
    if: |
      needs.check-missing-files.outputs.has_missing_json == 'true' ||
      needs.check-missing-files.outputs.has_missing_keys == 'true' ||
      needs.check-missing-files.outputs.has_missing_decrypted == 'true'
    timeout-minutes: 60
    outputs:
      json_generated: ${{ steps.generate-json.outputs.generated_count }}
      json_failed: ${{ steps.generate-json.outputs.json_failed }}
      json_success_rate: ${{ steps.generate-json.outputs.json_success_rate }}
      dic_generated: ${{ steps.generate-dic.outputs.generated_count }}
      dic_failed: ${{ steps.generate-dic.outputs.dic_failed }}
      dic_success_rate: ${{ steps.generate-dic.outputs.dic_success_rate }}
      decrypt_generated: ${{ steps.generate-decrypted.outputs.json_generated }}
      decrypt_failed: ${{ steps.generate-decrypted.outputs.decrypt_failed }}
      decrypt_success_rate: ${{ steps.generate-decrypted.outputs.decrypt_success_rate }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.setup-pr-branch.outputs.branch_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pycryptodome
      
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Generate JSON files
        id: generate-json
        if: needs.check-missing-files.outputs.has_missing_json == 'true'
        continue-on-error: true
        run: |
          echo "Generating JSON files from RFID dumps..."
          python3 .github/scripts/local-json-generator.py . ${{ github.event.inputs.force_regenerate == 'true' && '--force' || '' }} > json_generation.log 2>&1
          
          # Ensure log file is fully written
          sleep 1
          
          # Extract success metrics from output
          JSON_GENERATED=$(grep "Successfully generated:" json_generation.log | grep -o '[0-9]*' | head -1 || echo "0")
          JSON_FAILED=$(grep "Failed:" json_generation.log | grep -o '[0-9]*' | head -1 || echo "0") 
          SUCCESS_RATE=$(grep "Success rate:" json_generation.log | grep -o '[0-9.]*%' || echo "0%")
          
          echo "generated_count=$JSON_GENERATED" >> $GITHUB_OUTPUT
          echo "json_failed=$JSON_FAILED" >> $GITHUB_OUTPUT
          echo "json_success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
          
          echo "Metrics extracted:"
          echo "  Generated: $JSON_GENERATED"
          echo "  Failed: $JSON_FAILED" 
          echo "  Success Rate: $SUCCESS_RATE"
          echo "Generated $JSON_GENERATED JSON files (${JSON_FAILED} failed, ${SUCCESS_RATE} success rate)"

      - name: Generate dictionary files
        id: generate-dic
        if: needs.check-missing-files.outputs.has_missing_keys == 'true'
        continue-on-error: true
        run: |
          echo "Converting key.bin files to .dic format..."
          python3 .github/scripts/key-to-dic-converter.py . ${{ github.event.inputs.force_regenerate == 'true' && '--force' || '' }} > dic_generation.log 2>&1
          
          # Ensure log file is fully written
          sleep 1
          
          # Extract success metrics from output
          DIC_GENERATED=$(grep "Successfully converted:" dic_generation.log | grep -o '[0-9]*' | head -1 || echo "0")
          DIC_FAILED=$(grep "Failed:" dic_generation.log | grep -o '[0-9]*' | head -1 || echo "0")
          SUCCESS_RATE=$(grep "Success rate:" dic_generation.log | grep -o '[0-9.]*%' || echo "0%")
          
          echo "generated_count=$DIC_GENERATED" >> $GITHUB_OUTPUT
          echo "dic_failed=$DIC_FAILED" >> $GITHUB_OUTPUT
          echo "dic_success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
          
          echo "Metrics extracted:"
          echo "  Generated: $DIC_GENERATED"
          echo "  Failed: $DIC_FAILED"
          echo "  Success Rate: $SUCCESS_RATE"
          echo "Generated $DIC_GENERATED dictionary files (${DIC_FAILED} failed, ${SUCCESS_RATE} success rate)"

      - name: Generate decrypted files
        id: generate-decrypted
        if: needs.check-missing-files.outputs.has_missing_decrypted == 'true'
        continue-on-error: true
        run: |
          echo "Decrypt RFID dumps and generate JSON files directly..."
          python3 .github/scripts/decrypt-rfid-dumps.py . ${{ github.event.inputs.force_regenerate == 'true' && '--force' || '' }} > decrypt_generation.log 2>&1
          
          # Ensure log file is fully written
          sleep 1
          
          # Extract success metrics from output
          DECRYPT_GENERATED=$(grep "Successfully decrypted:" decrypt_generation.log | grep -o '[0-9]*' | head -1 || echo "0")
          DECRYPT_FAILED=$(grep "Failed:" decrypt_generation.log | grep -o '[0-9]*' | head -1 || echo "0")
          SUCCESS_RATE=$(grep "Success rate:" decrypt_generation.log | grep -o '[0-9.]*%' || echo "0%")
          
          echo "json_generated=$DECRYPT_GENERATED" >> $GITHUB_OUTPUT
          echo "decrypt_failed=$DECRYPT_FAILED" >> $GITHUB_OUTPUT
          echo "decrypt_success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
          
          echo "Metrics extracted:"
          echo "  Generated: $DECRYPT_GENERATED"
          echo "  Failed: $DECRYPT_FAILED"
          echo "  Success Rate: $SUCCESS_RATE"
          echo "Generated $DECRYPT_GENERATED decrypted JSON files (${DECRYPT_FAILED} failed, ${SUCCESS_RATE} success rate)"
      
      - name: Check for changes
        id: check-changes
        run: |
          if [[ -z "$(git status --porcelain)" ]]; then
              echo "has_changes=false" >> $GITHUB_OUTPUT
              echo "No changes detected"
          else
              echo "has_changes=true" >> $GITHUB_OUTPUT
              echo "Changes detected:"
              git status --porcelain
          fi
      
      - name: Commit changes
        if: steps.check-changes.outputs.has_changes == 'true'
        id: commit-changes
        run: |
          BRANCH_NAME="${{ needs.setup-pr-branch.outputs.branch_name }}"
          
          # Add all generated files
          git add *.json **/*.json 2>/dev/null || true
          git add *.dic **/*.dic 2>/dev/null || true
          git add *-decrypted.json **/*-decrypted.json 2>/dev/null || true
          
          ADDED_COUNT=$(git diff --cached --name-only | wc -l)
          echo "added_count=$ADDED_COUNT" >> $GITHUB_OUTPUT
          
          if [ $ADDED_COUNT -gt 0 ]; then
            # Build commit message with all generation types
            COMMIT_MSG="feat: auto-generate RFID processing files"
            COMMIT_BODY=""
            
            if [ "${{ steps.generate-json.outputs.generated_count }}" != "0" ]; then
              COMMIT_BODY="${COMMIT_BODY}- Generated ${{ steps.generate-json.outputs.generated_count }} JSON files from RFID .bin dumps\n"
            fi
            
            if [ "${{ steps.generate-dic.outputs.generated_count }}" != "0" ]; then
              COMMIT_BODY="${COMMIT_BODY}- Generated ${{ steps.generate-dic.outputs.generated_count }} dictionary files from key.bin files\n"
            fi
            
            if [ "${{ steps.generate-decrypted.outputs.json_generated }}" != "0" ]; then
              COMMIT_BODY="${COMMIT_BODY}- Generated ${{ steps.generate-decrypted.outputs.json_generated }} decrypted JSON files from encrypted dumps\n"
            fi
            
            COMMIT_BODY="${COMMIT_BODY}- Used parse.py, key derivation, and decryption tools\n"
            COMMIT_BODY="${COMMIT_BODY}- Includes complete temperature profiles and metadata\n"
            COMMIT_BODY="${COMMIT_BODY}- Automated via GitHub Actions workflow\n\nGenerated files: $ADDED_COUNT"
            
            git commit -m "$COMMIT_MSG" -m "$COMMIT_BODY"
            
            git push origin "$BRANCH_NAME"
            echo "Pushed $ADDED_COUNT files to branch: $BRANCH_NAME"
          else
            echo "No files to commit"
          fi
      
      - name: Get PR file statistics
        if: steps.check-changes.outputs.has_changes == 'true' && needs.setup-pr-branch.outputs.is_new_pr == 'false'
        id: pr-stats
        run: |
          # Get total files in the PR by comparing with main branch
          git fetch origin main
          
          # Count different file types in the PR
          JSON_FILES=$(git diff --name-only origin/main...HEAD | grep '\.json$' | grep -v '\-decrypted\.json$' | wc -l)
          DIC_FILES=$(git diff --name-only origin/main...HEAD | grep '\.dic$' | wc -l)
          DECRYPTED_FILES=$(git diff --name-only origin/main...HEAD | grep '\-decrypted\.json$' | wc -l)
          TOTAL_FILES=$(git diff --name-only origin/main...HEAD | wc -l)
          
          echo "json_files=$JSON_FILES" >> $GITHUB_OUTPUT
          echo "dic_files=$DIC_FILES" >> $GITHUB_OUTPUT
          echo "decrypted_files=$DECRYPTED_FILES" >> $GITHUB_OUTPUT
          echo "total_files=$TOTAL_FILES" >> $GITHUB_OUTPUT
          
          echo "PR contains:"
          echo "  JSON files: $JSON_FILES"
          echo "  Dictionary files: $DIC_FILES"  
          echo "  Decrypted files: $DECRYPTED_FILES"
          echo "  Total files: $TOTAL_FILES"

      - name: Create or update Pull Request
        if: steps.check-changes.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = "${{ needs.setup-pr-branch.outputs.branch_name }}";
            const addedCount = parseInt("${{ steps.commit-changes.outputs.added_count }}") || 0;
            const isUpdate = "${{ needs.setup-pr-branch.outputs.is_new_pr }}" === 'false';
            const existingPRNumber = "${{ needs.setup-pr-branch.outputs.pr_number }}";
            
            // Use PR cumulative stats if updating, otherwise use latest run stats for new PR
            let jsonFiles, dicFiles, decryptedFiles, totalFiles;
            let titleParts = [];
            let summaryParts = [];
            
            if (isUpdate && "${{ steps.pr-stats.outputs.total_files }}" !== "") {
              // Use cumulative PR stats
              jsonFiles = parseInt("${{ steps.pr-stats.outputs.json_files }}") || 0;
              dicFiles = parseInt("${{ steps.pr-stats.outputs.dic_files }}") || 0;
              decryptedFiles = parseInt("${{ steps.pr-stats.outputs.decrypted_files }}") || 0;
              totalFiles = parseInt("${{ steps.pr-stats.outputs.total_files }}") || 0;
            } else {
              // Use latest generation stats for new PR
              jsonFiles = parseInt("${{ steps.generate-json.outputs.generated_count }}") || 0;
              dicFiles = parseInt("${{ steps.generate-dic.outputs.generated_count }}") || 0;
              decryptedFiles = parseInt("${{ steps.generate-decrypted.outputs.json_generated }}") || 0;
              totalFiles = jsonFiles + dicFiles + decryptedFiles;
            }
            
            if (jsonFiles > 0) {
              titleParts.push(`${jsonFiles} JSON`);
              summaryParts.push(`- **JSON Files**: ${jsonFiles}`);
            }
            
            if (dicFiles > 0) {
              titleParts.push(`${dicFiles} dictionary`);
              summaryParts.push(`- **Dictionary Files**: ${dicFiles}`);
            }
            
            if (decryptedFiles > 0) {
              titleParts.push(`${decryptedFiles} decrypted`);
              summaryParts.push(`- **Decrypted Files**: ${decryptedFiles}`);
            }
            
            const title = `Auto-generate ${titleParts.join(', ')} RFID files`;
            
            const prBody = [
              '## 🤖 Automated RFID File Generation',
              '',
              ...summaryParts,
              `- **Total Files in PR**: ${totalFiles}`,
              `- **Files Added This Run**: ${addedCount}`,
              '',
              '---',
              '',
              isUpdate ? '🤖 Automatically updated by GitHub Actions.' : '🤖 Automatically created by GitHub Actions.'
            ].join('\n');
            
            if (isUpdate && existingPRNumber) {
              // Update existing PR
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: parseInt(existingPRNumber),
                title: title,
                body: prBody
              });
              
              console.log(`Updated existing PR #${existingPRNumber}`);
              
              // Add comment about the update only if files were actually added
              if (addedCount > 0) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(existingPRNumber),
                  body: `🤖 **Automated Update**: Added ${addedCount} new files to this PR.`
                });
              }
              
            } else {
              // Create new PR
              const { data: pullRequest } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                head: branchName,
                base: 'main',
                body: prBody,
                draft: false
              });
              
              console.log('Created PR #' + pullRequest.number + ': ' + pullRequest.html_url);
              
              // Apply comprehensive labels
              const labels = ['rfid', 'automation'];
              if (jsonGenerated > 0) labels.push('json-generation');
              if (dicGenerated > 0) labels.push('cryptography');
              if (decryptGenerated > 0) labels.push('decryption');
              
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pullRequest.number,
                labels: labels
              });
            }


  summary:
    name: RFID Processing Summary
    runs-on: ubuntu-latest
    needs: [setup-pr-branch, check-missing-files, generate-all-files]
    if: always()
    
    steps:
      - name: Report Summary
        run: |
          echo "## 🔍 RFID Processing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Combined Generation Summary
          if [ "${{ needs.check-missing-files.outputs.has_missing_json }}" == "true" ] || 
             [ "${{ needs.check-missing-files.outputs.has_missing_keys }}" == "true" ] ||
             [ "${{ needs.check-missing-files.outputs.has_missing_decrypted }}" == "true" ]; then
            
            echo "### 📋 File Generation Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # JSON Generation Summary
            if [ "${{ needs.check-missing-files.outputs.has_missing_json }}" == "true" ]; then
              echo "**JSON Files**: ${{ needs.check-missing-files.outputs.total_missing_json }} processed" >> $GITHUB_STEP_SUMMARY
              echo "- ✅ Generated: ${{ needs.generate-all-files.outputs.json_generated }}" >> $GITHUB_STEP_SUMMARY
              echo "- ❌ Failed: ${{ needs.generate-all-files.outputs.json_failed }}" >> $GITHUB_STEP_SUMMARY
              echo "- 📊 Success Rate: ${{ needs.generate-all-files.outputs.json_success_rate }}" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Dictionary Generation Summary  
            if [ "${{ needs.check-missing-files.outputs.has_missing_keys }}" == "true" ]; then
              echo "**Dictionary Files**: ${{ needs.check-missing-files.outputs.total_missing_keys }} processed" >> $GITHUB_STEP_SUMMARY
              echo "- ✅ Generated: ${{ needs.generate-all-files.outputs.dic_generated }}" >> $GITHUB_STEP_SUMMARY
              echo "- ❌ Failed: ${{ needs.generate-all-files.outputs.dic_failed }}" >> $GITHUB_STEP_SUMMARY
              echo "- 📊 Success Rate: ${{ needs.generate-all-files.outputs.dic_success_rate }}" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Decrypted Generation Summary
            if [ "${{ needs.check-missing-files.outputs.has_missing_decrypted }}" == "true" ]; then
              echo "**Decrypted Files**: ${{ needs.check-missing-files.outputs.total_missing_decrypted }} processed" >> $GITHUB_STEP_SUMMARY
              echo "- ✅ Generated: ${{ needs.generate-all-files.outputs.decrypt_generated }}" >> $GITHUB_STEP_SUMMARY
              echo "- ❌ Failed: ${{ needs.generate-all-files.outputs.decrypt_failed }}" >> $GITHUB_STEP_SUMMARY
              echo "- 📊 Success Rate: ${{ needs.generate-all-files.outputs.decrypt_success_rate }}" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "**Overall Status**: ${{ needs.generate-all-files.result }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ✅ All RFID Files Up to Date" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔄 Next Run: Daily at 02:00 UTC" >> $GITHUB_STEP_SUMMARY