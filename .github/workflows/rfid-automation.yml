name: RFID Data Processing Automation

on:
  # Run on pushes to main that affect RFID files
  push:
    branches: [ main ]
    paths:
      - '**/*.bin'
  
  # Run on schedule to catch any missed files
  schedule:
    # Run daily at 02:00 UTC
    - cron: '0 2 * * *'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      force_regenerate:
        description: 'Force regenerate all files (not just missing ones)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

permissions:
  contents: write
  pull-requests: write

jobs:
  check-missing-files:
    name: Check for Missing Files
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      missing_json: ${{ steps.find-missing.outputs.missing_json }}
      has_missing_json: ${{ steps.find-missing.outputs.has_missing_json }}
      total_missing_json: ${{ steps.find-missing.outputs.total_missing_json }}
      missing_keys: ${{ steps.find-missing.outputs.missing_keys }}
      has_missing_keys: ${{ steps.find-missing.outputs.has_missing_keys }}
      total_missing_keys: ${{ steps.find-missing.outputs.total_missing_keys }}
      missing_decrypted: ${{ steps.find-missing.outputs.missing_decrypted }}
      has_missing_decrypted: ${{ steps.find-missing.outputs.has_missing_decrypted }}
      total_missing_decrypted: ${{ steps.find-missing.outputs.total_missing_decrypted }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pycryptodome
      
      - name: Find missing files
        id: find-missing
        run: |
          echo "Scanning for missing JSON files..."
          python3 .github/scripts/local-json-generator.py . --dry-run --force=${{ github.event.inputs.force_regenerate == 'true' }} > json_check.log 2>&1
          JSON_COUNT=$(grep "Found.*files needing JSON generation" json_check.log | grep -o '[0-9]*' | head -1 || echo "0")
          
          echo "Scanning for missing dictionary files..."
          python3 .github/scripts/key-to-dic-converter.py . --dry-run --force=${{ github.event.inputs.force_regenerate == 'true' }} > keys_check.log 2>&1
          KEYS_COUNT=$(grep "Found.*files needing .dic conversion" keys_check.log | grep -o '[0-9]*' | head -1 || echo "0")
          
          echo "Scanning for missing decrypted files..."
          python3 .github/scripts/decrypt-rfid-dumps.py . --dry-run --force=${{ github.event.inputs.force_regenerate == 'true' }} > decrypt_check.log 2>&1
          DECRYPT_COUNT=$(grep "Found.*files needing decryption" decrypt_check.log | grep -o '[0-9]*' | head -1 || echo "0")
          
          echo "Found files needing processing:"
          echo "  - JSON files: $JSON_COUNT"
          echo "  - Dictionary files: $KEYS_COUNT"  
          echo "  - Decrypted files: $DECRYPT_COUNT"
          
          # Set JSON outputs
          if [ "$JSON_COUNT" -gt "0" ]; then
            echo "has_missing_json=true" >> $GITHUB_OUTPUT
            echo "total_missing_json=$JSON_COUNT" >> $GITHUB_OUTPUT
            echo "missing_json=[]" >> $GITHUB_OUTPUT  # Simplified for now
          else
            echo "has_missing_json=false" >> $GITHUB_OUTPUT
            echo "total_missing_json=0" >> $GITHUB_OUTPUT
            echo "missing_json=[]" >> $GITHUB_OUTPUT
          fi
          
          # Set Keys outputs  
          if [ "$KEYS_COUNT" -gt "0" ]; then
            echo "has_missing_keys=true" >> $GITHUB_OUTPUT
            echo "total_missing_keys=$KEYS_COUNT" >> $GITHUB_OUTPUT
            echo "missing_keys=[]" >> $GITHUB_OUTPUT  # Simplified for now
          else
            echo "has_missing_keys=false" >> $GITHUB_OUTPUT
            echo "total_missing_keys=0" >> $GITHUB_OUTPUT
            echo "missing_keys=[]" >> $GITHUB_OUTPUT
          fi
          
          # Set Decrypted outputs
          if [ "$DECRYPT_COUNT" -gt "0" ]; then
            echo "has_missing_decrypted=true" >> $GITHUB_OUTPUT
            echo "total_missing_decrypted=$DECRYPT_COUNT" >> $GITHUB_OUTPUT
            echo "missing_decrypted=[]" >> $GITHUB_OUTPUT  # Simplified for now
          else
            echo "has_missing_decrypted=false" >> $GITHUB_OUTPUT
            echo "total_missing_decrypted=0" >> $GITHUB_OUTPUT
            echo "missing_decrypted=[]" >> $GITHUB_OUTPUT
          fi

  generate-json-files:
    name: Generate Missing JSON Files
    runs-on: ubuntu-latest
    needs: check-missing-files
    if: needs.check-missing-files.outputs.has_missing_json == 'true'
    timeout-minutes: 30
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pycryptodome
      
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Generate JSON files
        id: generate-json
        continue-on-error: true
        run: |
          echo "Generating JSON files from RFID dumps..."
          python3 .github/scripts/local-json-generator.py . --force=${{ github.event.inputs.force_regenerate == 'true' }} 2>&1 | tee json_generation.log
          
          # Extract success metrics from output
          JSON_GENERATED=$(grep "Successfully generated:" json_generation.log | grep -o '[0-9]*' | head -1 || echo "0")
          JSON_FAILED=$(grep "Failed:" json_generation.log | grep -o '[0-9]*' | head -1 || echo "0") 
          SUCCESS_RATE=$(grep "Success rate:" json_generation.log | grep -o '[0-9.]*%' || echo "0%")
          
          echo "generated_count=$JSON_GENERATED" >> $GITHUB_OUTPUT
          echo "json_failed=$JSON_FAILED" >> $GITHUB_OUTPUT
          echo "json_success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
          echo "Generated $JSON_GENERATED JSON files (${JSON_FAILED} failed, ${SUCCESS_RATE} success rate)"
      
      - name: Check for changes
        id: check-changes
        run: |
          if git diff --quiet && git diff --cached --quiet; then
              echo "has_changes=false" >> $GITHUB_OUTPUT
              echo "No changes detected"
          else
              echo "has_changes=true" >> $GITHUB_OUTPUT
              echo "Changes detected:"
              git status --porcelain
          fi
      
      - name: Create branch and commit changes
        if: steps.check-changes.outputs.has_changes == 'true'
        id: create-branch
        run: |
          BRANCH_NAME="auto/json-$(date +%Y%m%d-%H%M%S)"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          git checkout -b "$BRANCH_NAME"
          
          # Add all new JSON files
          git add *.json **/*.json 2>/dev/null || true
          
          ADDED_COUNT=$(git diff --cached --name-only | wc -l)
          echo "added_count=$ADDED_COUNT" >> $GITHUB_OUTPUT
          
          git commit -m "feat: auto-generate JSON files for RFID dumps

          - Generated JSON files for ${{ steps.generate-json.outputs.generated_count }} RFID .bin files
          - Used parse.py with proper YAML-to-JSON conversion
          - Includes complete temperature profiles and metadata
          - Automated via GitHub Actions workflow
          
          Generated files: $ADDED_COUNT"
          
          git push origin "$BRANCH_NAME"
          echo "Created branch: $BRANCH_NAME"
      
      - name: Create Pull Request
        if: steps.check-changes.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = "${{ steps.create-branch.outputs.branch_name }}";
            const generatedCount = "${{ steps.generate-json.outputs.generated_count }}";
            const addedCount = "${{ steps.create-branch.outputs.added_count }}";
            const totalMissing = "${{ needs.check-missing-files.outputs.total_missing_json }}";
            
            const prBody = [
              '## ü§ñ Automated RFID JSON Generation',
              '',
              'This PR automatically generates missing JSON files for RFID .bin dumps.',
              '',
              '### Summary',
              `- **Generated**: ${generatedCount} new JSON files`,
              `- **Total Missing Found**: ${totalMissing} files`,
              `- **Files Added**: ${addedCount} files`,
              '',
              '### Process',
              '1. üîç Scanned RFID library for .bin files without corresponding .json files',
              '2. üîÑ Used `parse.py` to extract RFID data from binary dumps',
              '3. üìù Converted YAML-like output to proper JSON format',
              '4. ‚úÖ Added complete temperature profiles and metadata',
              '',
              '### Generated Files Include',
              '- Material identification (type, variant ID, material ID)',
              '- Temperature profiles (hotend, bed, drying parameters)',
              '- Physical properties (weight, dimensions, color)',
              '- Production metadata (date, tray UID)',
              '- RFID technical data (UID, x_cam_info)',
              '',
              '---',
              '',
              'ü§ñ This PR was automatically created by the RFID automation workflow.'
            ].join('\\n');
            
            const { data: pullRequest } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Auto-generate ${generatedCount} missing RFID JSON files`,
              head: branchName,
              base: 'main',
              body: prBody,
              draft: false
            });
            
            console.log('Created PR #' + pullRequest.number + ': ' + pullRequest.html_url);
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pullRequest.number,
              labels: ['rfid', 'automation', 'json-generation']
            });

  generate-dic-files:
    name: Generate Missing Dictionary Files
    runs-on: ubuntu-latest
    needs: check-missing-files
    if: needs.check-missing-files.outputs.has_missing_keys == 'true'
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Generate dictionary files
        id: generate-dic
        continue-on-error: true
        run: |
          echo "Converting key.bin files to .dic format..."
          python3 .github/scripts/key-to-dic-converter.py . --force=${{ github.event.inputs.force_regenerate == 'true' }} 2>&1 | tee dic_generation.log
          
          # Extract success metrics from output
          DIC_GENERATED=$(grep "Successfully converted:" dic_generation.log | grep -o '[0-9]*' | head -1 || echo "0")
          DIC_FAILED=$(grep "Failed:" dic_generation.log | grep -o '[0-9]*' | head -1 || echo "0")
          SUCCESS_RATE=$(grep "Success rate:" dic_generation.log | grep -o '[0-9.]*%' || echo "0%")
          
          echo "generated_count=$DIC_GENERATED" >> $GITHUB_OUTPUT
          echo "dic_failed=$DIC_FAILED" >> $GITHUB_OUTPUT
          echo "dic_success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
          echo "Generated $DIC_GENERATED dictionary files (${DIC_FAILED} failed, ${SUCCESS_RATE} success rate)"
      
      - name: Check for changes
        id: check-changes
        run: |
          if git diff --quiet && git diff --cached --quiet; then
              echo "has_changes=false" >> $GITHUB_OUTPUT
          else
              echo "has_changes=true" >> $GITHUB_OUTPUT
              git status --porcelain
          fi
      
      - name: Create branch and commit changes
        if: steps.check-changes.outputs.has_changes == 'true'
        id: create-branch
        run: |
          BRANCH_NAME="auto/keys-$(date +%Y%m%d-%H%M%S)"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          git checkout -b "$BRANCH_NAME"
          git add *.dic **/*.dic 2>/dev/null || true
          
          ADDED_COUNT=$(git diff --cached --name-only | wc -l)
          echo "added_count=$ADDED_COUNT" >> $GITHUB_OUTPUT
          
          git commit -m "feat: auto-generate dictionary files for RFID keys

          - Generated .dic files for ${{ steps.generate-dic.outputs.generated_count }} key.bin files
          - Each .dic file contains hex-formatted cryptographic keys
          - Used for RFID tag decryption with Proxmark3 and similar tools
          - Automated via GitHub Actions workflow
          
          Generated files: $ADDED_COUNT"
          
          git push origin "$BRANCH_NAME"
      
      - name: Create Pull Request
        if: steps.check-changes.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = "${{ steps.create-branch.outputs.branch_name }}";
            const generatedCount = "${{ steps.generate-dic.outputs.generated_count }}";
            
            const { data: pullRequest } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Auto-generate ${generatedCount} RFID key dictionary files`,
              head: branchName,
              base: 'main',
              body: `## üîë Automated RFID Key Dictionary Generation\\n\\nGenerated ${generatedCount} .dic files from key.bin files for Proxmark3 compatibility.`,
              draft: false
            });
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pullRequest.number,
              labels: ['rfid', 'automation', 'cryptography']
            });

  generate-decrypted-files:
    name: Generate Decrypted JSON Files
    runs-on: ubuntu-latest
    needs: check-missing-files
    if: needs.check-missing-files.outputs.has_missing_decrypted == 'true'
    timeout-minutes: 45
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pycryptodome
      
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Generate decrypted files
        id: generate-decrypted
        continue-on-error: true
        run: |
          echo "Decrypt RFID dumps and generate JSON files directly..."
          python3 .github/scripts/decrypt-rfid-dumps.py . --force=${{ github.event.inputs.force_regenerate == 'true' }} 2>&1 | tee decrypt_generation.log
          
          # Extract success metrics from output
          DECRYPT_GENERATED=$(grep "Successfully decrypted:" decrypt_generation.log | grep -o '[0-9]*' | head -1 || echo "0")
          DECRYPT_FAILED=$(grep "Failed:" decrypt_generation.log | grep -o '[0-9]*' | head -1 || echo "0")
          SUCCESS_RATE=$(grep "Success rate:" decrypt_generation.log | grep -o '[0-9.]*%' || echo "0%")
          
          echo "json_generated=$DECRYPT_GENERATED" >> $GITHUB_OUTPUT
          echo "decrypt_failed=$DECRYPT_FAILED" >> $GITHUB_OUTPUT
          echo "decrypt_success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
          echo "Generated $DECRYPT_GENERATED decrypted JSON files (${DECRYPT_FAILED} failed, ${SUCCESS_RATE} success rate)"
      
      - name: Check for changes
        id: check-changes
        run: |
          if git diff --quiet && git diff --cached --quiet; then
              echo "has_changes=false" >> $GITHUB_OUTPUT
          else
              echo "has_changes=true" >> $GITHUB_OUTPUT
              git status --porcelain
          fi
      
      - name: Create branch and commit changes
        if: steps.check-changes.outputs.has_changes == 'true'
        id: create-branch
        run: |
          BRANCH_NAME="auto/decrypted-$(date +%Y%m%d-%H%M%S)"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          git checkout -b "$BRANCH_NAME"
          git add *-decrypted.json **/*-decrypted.json 2>/dev/null || true
          
          ADDED_COUNT=$(git diff --cached --name-only | wc -l)
          echo "added_count=$ADDED_COUNT" >> $GITHUB_OUTPUT
          
          git commit -m "feat: auto-generate decrypted JSON files from RFID dumps

          - Generated ${{ steps.generate-decrypted.outputs.json_generated }} JSON files from decrypted dumps
          - Used Bambu Lab key derivation and companion key files
          - Decrypted files enable full filament metadata extraction
          - Automated via GitHub Actions workflow
          
          Generated files: $ADDED_COUNT"
          
          git push origin "$BRANCH_NAME"
      
      - name: Create Pull Request
        if: steps.check-changes.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = "${{ steps.create-branch.outputs.branch_name }}";
            const jsonGenerated = "${{ steps.generate-decrypted.outputs.json_generated }}";
            
            const { data: pullRequest } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Auto-decrypt and generate ${jsonGenerated} RFID JSON files`,
              head: branchName,
              base: 'main',
              body: `## üîì Automated RFID Decryption and JSON Generation\\n\\nDecrypted RFID dumps and generated ${jsonGenerated} comprehensive JSON metadata files.`,
              draft: false
            });
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pullRequest.number,
              labels: ['rfid', 'automation', 'decryption']
            });

  summary:
    name: RFID Processing Summary
    runs-on: ubuntu-latest
    needs: [check-missing-files, generate-json-files, generate-dic-files, generate-decrypted-files]
    if: always()
    
    steps:
      - name: Report Summary
        run: |
          echo "## üîç RFID Processing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # JSON Generation Summary
          if [ "${{ needs.check-missing-files.outputs.has_missing_json }}" == "true" ]; then
            echo "### üìã JSON Files: ${{ needs.check-missing-files.outputs.total_missing_json }} processed" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Generated: ${{ needs.generate-json-files.outputs.generated_count }}" >> $GITHUB_STEP_SUMMARY
            echo "- ‚ùå Failed: ${{ needs.generate-json-files.outputs.json_failed }}" >> $GITHUB_STEP_SUMMARY
            echo "- üìä Success Rate: ${{ needs.generate-json-files.outputs.json_success_rate }}" >> $GITHUB_STEP_SUMMARY
            echo "- Status: ${{ needs.generate-json-files.result }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚úÖ All JSON Files Up to Date" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Dictionary Generation Summary  
          if [ "${{ needs.check-missing-files.outputs.has_missing_keys }}" == "true" ]; then
            echo "### üîë Dictionary Files: ${{ needs.check-missing-files.outputs.total_missing_keys }} processed" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Generated: ${{ needs.generate-dic-files.outputs.generated_count }}" >> $GITHUB_STEP_SUMMARY
            echo "- ‚ùå Failed: ${{ needs.generate-dic-files.outputs.dic_failed }}" >> $GITHUB_STEP_SUMMARY
            echo "- üìä Success Rate: ${{ needs.generate-dic-files.outputs.dic_success_rate }}" >> $GITHUB_STEP_SUMMARY
            echo "- Status: ${{ needs.generate-dic-files.result }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚úÖ All Dictionary Files Up to Date" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Decrypted Generation Summary
          if [ "${{ needs.check-missing-files.outputs.has_missing_decrypted }}" == "true" ]; then
            echo "### üîì Decrypted Files: ${{ needs.check-missing-files.outputs.total_missing_decrypted }} processed" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Generated: ${{ needs.generate-decrypted-files.outputs.json_generated }}" >> $GITHUB_STEP_SUMMARY
            echo "- ‚ùå Failed: ${{ needs.generate-decrypted-files.outputs.decrypt_failed }}" >> $GITHUB_STEP_SUMMARY
            echo "- üìä Success Rate: ${{ needs.generate-decrypted-files.outputs.decrypt_success_rate }}" >> $GITHUB_STEP_SUMMARY
            echo "- Status: ${{ needs.generate-decrypted-files.result }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚úÖ All Decrypted Files Up to Date" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîÑ Next Run: Daily at 02:00 UTC" >> $GITHUB_STEP_SUMMARY